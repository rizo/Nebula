open Prelude

let default = [|
  0b1011011110011110, 0b0011100010001110; (* NULL *)
  0b0111001000101100, 0b0111010111110100; (* SOH *)
  0b0001100110111011, 0b0111111110001111; (* STX *)
  0b1000010111111001, 0b1011000101011000; (* ETX *)
  0b0010010000101110, 0b0010010000000000; (* EOT *)
  0b0000100000101010, 0b0000100000000000; (* ENQ *)
  0b0000000000001000, 0b0000000000000000; (* ACK *)
  0b0000100000001000, 0b0000100000001000; (* BEL *)
  0b0000000011111111, 0b0000000000000000; (* BS *)
  0b0000000011111000, 0b0000100000001000; (* TAB *)
  0b0000100011111000, 0b0000000000000000; (* LF *)
  0b0000100000001111, 0b0000000000000000; (* VT *)
  0b0000000000001111, 0b0000100000001000; (* FF *)
  0b0000000011111111, 0b0000100000001000; (* CR *)
  0b0000100011111000, 0b0000100000001000; (* SO *)
  0b0000100011111111, 0b0000000000000000; (* SI *)
  0b0000100000001111, 0b0000100000001000; (* DLE *)
  0b0000100011111111, 0b0000100000001000; (* DC1 *)
  0b0110011000110011, 0b1001100111001100; (* DC2 *)
  0b1001100100110011, 0b0110011011001100; (* DC3 *)
  0b1111111011111000, 0b1110000010000000; (* DC4 *)
  0b0111111100011111, 0b0000011100000001; (* NAK *)
  0b0000000100000111, 0b0001111101111111; (* SYN *)
  0b1000000011100000, 0b1111100011111110; (* ETB *)
  0b0101010100000000, 0b1010101000000000; (* CAN *)
  0b0101010110101010, 0b0101010110101010; (* EM *)
  0b1111111110101010, 0b1111111101010101; (* SUB *)
  0b0000111100001111, 0b0000111100001111; (* ESC *)
  0b1111000011110000, 0b1111000011110000; (* FS *)
  0b0000000000000000, 0b1111111111111111; (* GS *)
  0b1111111111111111, 0b0000000000000000; (* RS *)
  0xffff, 0xffff;                         (* US *)
  0, 0;                                   (* Space *)
  0b0000000010111111, 0b0000000000000000; (* ! *)
  0b0000001100000000, 0b0000001100000000; (* double-quote *)
  0b0011111000010100, 0b0011111000000000; (* # *)
  0b0100110011010110, 0b0110010000000000; (* $ *)
  0b1100001000111000, 0b1000011000000000; (* % *)
  0b0110110001010010, 0b1110110010100000; (* & *)
  0b0000000000000010, 0b0000000100000000; (* ' *)
  0b0011110001000010, 0b1000000100000000; (* ( *)
  0b1000000101000010, 0b0011110000000000; (* ) *)
  0b0000101000000100, 0b0000101000000000; (* * *)
  0b0000100000011100, 0b0000100000000000; (* + *)
  0b0000000010000000, 0b0100000000000000; (* , *)
  0b0000100000001000, 0b0000100000000000; (* - *)
  0b0000000010000000, 0b0000000000000000; (* . *)
  0b1100000000111000, 0b0000011000000000; (* / *)
  0b0111110010010010, 0b0111110000000000; (* 0 *)
  0b1000001011111110, 0b1000000000000000; (* 1 *)
  0b1100010010100010, 0b1001110000000000; (* 2 *)
  0b1000001010010010, 0b0110110000000000; (* 3 *)
  0b0001111000010000, 0b1111111000000000; (* 4 *)
  0b1001111010010010, 0b0110001000000000; (* 5 *)
  0b0111110010010010, 0b0110010000000000; (* 6 *)
  0b1100001000110010, 0b0000111000000000; (* 7 *)
  0b0110110010010010, 0b0110110000000000; (* 8 *)
  0b0100110010010010, 0b0111110000000000; (* 9 *)
  0b0000000001001000, 0b0000000000000000; (* : *)
  0b0000000010000000, 0b0100100000000000; (* ; *)
  0b0001000000101000, 0b0100010000000000; (* < *)
  0b0010010000100100, 0b0010010000000000; (* = *)
  0b0100010000101000, 0b0001000000000000; (* > *)
  0b0000001010110001, 0b0000111000000000; (* ? *)
  0b0111110010110010, 0b1011110000000000; (* @ *)
  0b1111110000010010, 0b1111110000000000; (* A *)
  0b1111111010010010, 0b0110110000000000; (* B *)
  0b0111110010000010, 0b0100010000000000; (* C *)
  0b1111111010000010, 0b0111110000000000; (* D *)
  0b1111111010010010, 0b1001001000000000; (* E *)
  0b1111111000010010, 0b0001001000000000; (* F *)
  0b0111110010000010, 0b1110010000000000; (* G *)
  0b1111111000010000, 0b1111111000000000; (* H *)
  0b1000001011111110, 0b1000001000000000; (* I *)
  0b0100001010000010, 0b1111111000000000; (* J *)
  0b1111111000010000, 0b1110111000000000; (* K *)
  0b1111111010000000, 0b1000000000000000; (* L *)
  0b1111111000001100, 0b1111111000000000; (* M *)
  0b1111111000000010, 0b1111110000000000; (* N *)
  0b0111110010000010, 0b0111110000000000; (* O *)
  0b1111111000010010, 0b0000110000000000; (* P *)
  0b0111110011000010, 0b1111110000000000; (* Q *)
  0b1111111000010010, 0b1110110000000000; (* R *)
  0b1000110010010010, 0b0110001000000000; (* S *)
  0b0000001011111110, 0b0000001000000000; (* T *)
  0b0111111010000000, 0b0111111000000000; (* U *)
  0b0011111011000000, 0b0011111000000000; (* V *)
  0b1111111001100000, 0b1111111000000000; (* W *)
  0b1110111000010000, 0b1110111000000000; (* X *)
  0b0000111011110000, 0b0000111000000000; (* Y *)
  0b1110001010010010, 0b1000111000000000; (* Z *)
  0b1111111010000010, 0b0000000000000000; (* [ *)
  0b0000011000111000, 0b1100000000000000; (* backslash *)
  0b0000000010000010, 0b1111111000000000; (* ] *)
  0b0000010000000010, 0b0000010000000000; (* ^ *)
  0b1000000010000000, 0b1000000000000000; (* _ *)
  0b0000001000000100, 0b0000000000000000; (* ` *)
  0b0100100010101000, 0b1111100000000000; (* a *)
  0b1111111010001000, 0b0111000000000000; (* b *)
  0b0111000010001000, 0b0101000000000000; (* c *)
  0b0111000010001000, 0b1111111000000000; (* d *)
  0b0111000010101000, 0b1011000000000000; (* e *)
  0b0001000011111100, 0b0001001000000000; (* f *)
  0b1001000010101000, 0b0111100000000000; (* g *)
  0b1111111000001000, 0b1111000000000000; (* h *)
  0b1000100011111010, 0b1000000000000000; (* i *)
  0b0100000010000000, 0b0111101000000000; (* j *)
  0b1111111000100000, 0b1101100000000000; (* k *)
  0b1000001011111110, 0b1000000000000000; (* l *)
  0b1111100000110000, 0b1111100000000000; (* m *)
  0b1111100000001000, 0b1111000000000000; (* n *)
  0b0111000010001000, 0b0111000000000000; (* o *)
  0b1111100000101000, 0b0001000000000000; (* p *)
  0b0001000000101000, 0b1111100000000000; (* q *)
  0b1111100000001000, 0b0001000000000000; (* r *)
  0b1001000010101000, 0b0100100000000000; (* s *)
  0b0000100011111100, 0b1000100000000000; (* t *)
  0b0111100010000000, 0b1111100000000000; (* u *)
  0b0011100011000000, 0b0011100000000000; (* v *)
  0b1111100001100000, 0b1111100000000000; (* w *)
  0b1101100000100000, 0b1101100000000000; (* x *)
  0b1001100010100000, 0b0111100000000000; (* y *)
  0b1100100010101000, 0b1001100000000000; (* z *)
  0b0001000001101100, 0b1000001000000000; (* { *)
  0b0000000011101110, 0b0000000000000000; (* | *)
  0b1000001001101100, 0b0001000000000000; (* } *)
  0b0000010000000010, 0b0000010000000010; (* ~ *)
  0b0000001000000101, 0b0000001000000000; (* DEL *)
|]
  |> Array.map (fun (a, b) -> word a, word b)
